class ClassBuilder:
    # ИСПОЛЬЗОВАТЬ: строка документации помещается под заголовком класса/метода/функции
    """Класс, для строительства строк вывода в виде тегов HTML."""
    def __init__(self, class_name: str):
        self.name = class_name
        self.attributes: list[str] = []

    def add_attr(self, *attr: str | int | bool):
        # ИСПРАВИТЬ: строка документации для метода должна начинаться с глагола и отвечать на вопрос "что делает метод?"
        """Метод, для добавления всех строк в один список."""
        self.attributes += [attr]
        return self

    def clear(self):
        # ИСПРАВИТЬ: очищающий от ереси? или от чего?
        """Метод, очищающий все строки."""
        self.attributes.clear()

    def __str__(self):
        if not self.attributes:
            return f'class {self.name}:\n\tpass'

        # ИСПРАВИТЬ: как имя meaning ("значение") соотносится с назначением этой функции (возврат имени класса)?
        # я имел ввиду, что эта функция определяет значение аргумента, который в него передаётся (слово, цифра или булево значение)
        # КОММЕНТАРИЙ: это называется "тип", а не "значение" — функция type() как бы намекает

        def meaning(line):
            """Метод, определяющий чем является переданный в этот метод, атрибут, и делающий из списка строк более красивый вывод."""
            return type(line).__name__

        # СДЕЛАТЬ: постарайтесь всё-таки осмыслить то, что написано ниже

        # КОММЕНТАРИЙ: что касается того, как вы в принципе формируете эти строки выводимого кода — если в нём вы прописываете значения по умолчанию непосредственно в атрибуты (как сейчас), то тогда параметры в конструктор передавать вообще не нужно, кроме self, разумеется
        s_line = ', '.join(
            # ДОБАВИТЬ: значения по умолчанию для ваших атрибутов
            # КОММЕНТАРИЙ: а если всё-таки прописываете параметры для конструктора, то и значения по умолчанию должны быть прописаны для параметров — в заголовке метода конструктора
            line[0] + f': {meaning(line[1])}'
            for line in self.attributes
        )
        finished_lines = '\n\t\t'.join(
            # КОММЕНТАРИЙ: и в качестве значений для атрибутов выводимого класса прописываются уже локальные переменные параметров
            f'self.{line[0]} = ' + str(line[1])
            for line in self.attributes
        )
        return f'class {self.name}:\n' \
               f'\tdef __init__(self, {s_line}):\n' \
               f'\t\t{finished_lines}'


body = ClassBuilder("CyberSport")
print(body)
print('\n')

body.add_attr("nick", 'Malibuca')\
    .add_attr("age", 17)\
    .add_attr("country", 'Serbia')
print(body)
print('\n')

body.clear()
body.add_attr("nick", 'Toose')\
    .add_attr("age", 20)\
    .add_attr("signed", False)
print(body)


# ИТОГ: ничего критичного, но много моментов на которые необходимо обратить внимание — 5/8
