from itertools import permutations

# ИСПРАВИТЬ: мы не используем имена встроенных функций для собственных переменных — set
set = {'v','i','d','e','o','s'}
# ИСПРАВИТЬ: мы не используем имена встроенных функций для собственных переменных — list
list = []

# ИСПРАВИТЬ: традиция и привычка диктуют нам использовать имена i, j, k только для индексов
i = 0
def permutation(set):
    global i
    for p in permutations(set):
        # ИСПРАВИТЬ: зачем вам этот счётчик? вы формируете список, забив на генератор — ну дак посчитайте длину списка в конце
        i += 1
        # ИСПРАВИТЬ: это не механика генератора
        list.append(''.join(p))


permutation(set)
# ИСПОЛЬЗОВАТЬ: при подстановке любых объектов в f-строку нет необходимости явно преобразовывать объект в строку — это происходит неявно
print(list,'\n', f'Всего: {i} варианта(-ов)')


# ДОБАВИТЬ: после кода под комментарием stdout закомментированный вывод примера выполнения
# stdout:


# КОММЕНТАРИЙ: на случай, если вы ничего не поняли о генераторах: даже после лекции, чтения литературы и разбора примеров — то это хороший такой повод задать вопрос преподавателю — используйте этот повод
# ЛАЙФХАК: вопросы можно писать прямо здесь, комментарием


# ИТОГ: переписать — 1/6
